{"version":3,"file":"static/js/957.ecc8fdb8.chunk.js","mappings":"iUACMA,EAAU,mCACVC,EAAW,gCAEJC,EAAW,mCAAG,+GAEAC,MAAM,GAAD,OAAIF,EAAJ,oCAAwCD,IAF7C,cAEjBI,EAFiB,gBAGJA,EAASC,OAHL,cAGjBC,EAHiB,OAIvBC,QAAQC,IAAIF,EAAKG,SAJM,kBAKhBH,EAAKG,SALW,kCASvBF,QAAQC,IAAR,MATuB,0DAAH,qDAaXE,EAAW,mCAAG,WAAOC,GAAP,kGAGAR,MAAM,GAAD,OAAIF,EAAJ,gCAAoCD,EAApC,kBAAqDW,EAArD,+CAHL,cAGjBP,EAHiB,gBAIJA,EAASC,OAJL,cAIjBC,EAJiB,yBAKhBA,EAAKG,SALW,kCAQvBF,QAAQC,IAAR,MARuB,0DAAH,sDAYTI,EAAc,mCAAG,WAAOC,GAAP,kGAGHV,MAAM,GAAD,OAAIF,EAAJ,iBAAqBY,EAArB,oBAAsCb,EAAtC,oBAHF,cAGpBI,EAHoB,gBAIPA,EAASC,OAJF,cAIpBC,EAJoB,yBAKnBA,GALmB,kCAQ1BC,QAAQC,IAAR,MAR0B,0DAAH,sDAYdM,EAAiB,mCAAG,WAAOD,GAAP,kGAGNV,MAAM,GAAD,OAAIF,EAAJ,iBAAqBY,EAArB,4BAA8Cb,EAA9C,2BAHC,cAGvBI,EAHuB,gBAIVA,EAASC,OAJC,cAIvBC,EAJuB,yBAKtBA,EAAKG,SALiB,kCAQ7BF,QAAQC,IAAR,MAR6B,0DAAH,sDAYjBO,EAAc,mCAAG,WAAOF,GAAP,kGAGHV,MAAM,GAAD,OAAIF,EAAJ,iBAAqBY,EAArB,4BAA8Cb,EAA9C,2BAHF,cAGpBI,EAHoB,gBAIPA,EAASC,OAJF,cAIpBC,EAJoB,yBAKnBA,EAAKU,MALc,kCAQ1BT,QAAQC,IAAR,MAR0B,0DAAH,sDAYdS,EAAW,mCAAG,iHAGAd,MAAM,GAAD,OAAIF,EAAJ,oCAAwCD,EAAxC,oBAHL,cAGjBI,EAHiB,gBAIJA,EAASC,OAJL,OAIjBC,EAJiB,OAMjBY,EAAaZ,EAAKa,OAAOC,QAAO,SAACC,EAAD,GAAwB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAEhD,OADAF,EAAIC,GAAMC,EACHF,CACN,GAAE,CAAC,GAEJG,aAAaC,QAAQ,aAAcC,KAAKC,UAAUT,IAX7B,kDAcvBX,QAAQC,IAAR,MAduB,0DAAH,oD,oHC/DboB,EAAgBC,EAAAA,GAAAA,GAAH,yNAQbC,EAAYD,EAAAA,GAAAA,GAAH,kTAEE,SAACE,GAAD,OAASA,EAAKC,MAAMC,MAApB,IAWXC,EAAeL,EAAAA,GAAAA,IAAH,4CAGZM,EAAQN,EAAAA,GAAAA,GAAH,8CAGLO,EAAMP,EAAAA,GAAAA,IAAH,sHAMHQ,EAAcR,EAAAA,GAAAA,EAAH,sLAOA,SAACE,GAAD,OAASA,EAAKC,MAAMC,MAApB,IAEXK,EAAeT,EAAAA,GAAAA,IAAH,iFAKZU,EAASV,EAAAA,GAAAA,EAAH,0BAGNW,EAAcX,EAAAA,GAAAA,EAAH,0BCtCxB,EAdwB,SAACY,GACrB,IAAMC,EAAelB,aAAamB,QAAQ,cAAgBjB,KAAKkB,MAAMpB,aAAamB,QAAQ,eAAiB,CAAC,EACtGE,EAASJ,EAAUK,KAAI,SAAAxB,GAAE,OAAIoB,EAAapB,EAAjB,IAAsByB,QAAO,SAAAC,GAAI,YAAaC,IAATD,CAAJ,IAShE,OAPIH,EAAOK,OAAS,EAClBL,EAAOM,OAAO,EAAGN,EAAOK,OAAS,GAAGE,KAAK,UAEd,IAAlBP,EAAOK,QAChBL,EAAOO,KAAK,aAGPP,CACR,E,SCmBH,EAzBkB,SAAC,GAAyB,IAAxBQ,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,SAG1B,OACI,SAAC1B,EAAD,UACKyB,EAASP,KAAI,YAA6G,IAA3GxB,EAA0G,EAA1GA,GAAIiC,EAAsG,EAAtGA,eAAgBC,EAAsF,EAAtFA,cAAeC,EAAuE,EAAvEA,aAAcC,EAAyD,EAAzDA,YAAajB,EAA4C,EAA5CA,UAAWkB,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,eACnG,OACI,SAAC9B,EAAD,WACI,UAAC,KAAD,CAAS+B,GAAE,kBAAavC,GAAMwC,MAAO,CAACC,KAAMT,GAA5C,WACI,SAAClB,EAAD,CAAK4B,IAAG,UARX,mCAQW,OAAoBN,GAAeO,IAAKV,KAChD,UAACrB,EAAD,YACI,SAACC,EAAD,UAAQoB,GAAkBC,KAC1B,SAACnB,EAAD,UAAcoB,EAAaS,QAAQ,MACnC,UAAC5B,EAAD,YACI,SAACC,EAAD,UAAS4B,EAAgB1B,GAAW2B,KAAK,SACzC,UAAC5B,EAAD,iBAAgB6B,EAAAA,EAAAA,GAAQ,IAAIC,KAAKX,GAAgBC,iBARjDtC,EAcvB,KAEZ,C,6MCzBYiD,EAAS1C,EAAAA,GAAAA,KAAH,gMAOK,SAACE,GAAD,OAAUA,EAAKC,MAAMwC,MAArB,IAGXC,GAAa5C,EAAAA,EAAAA,IAAO6C,EAAAA,IAAP7C,CAAH,iFAMV8C,EAAQ9C,EAAAA,GAAAA,MAAH,gN,SCPlB,EAT2B,SAAC,GAA0B,IAAzB+C,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAEhC,OACI,UAACN,EAAD,YACQ,SAACI,EAAD,CAAOG,KAAK,OAAOF,MAAK,OAAEA,QAAF,IAAEA,EAAAA,EAAS,GAAIG,SAAU,SAACC,GAAD,OAASH,EAAYG,EAAIC,OAAOL,MAAhC,KACjD,SAACH,EAAD,CAAYS,KAAM,OAGjC,EC+BD,EApCe,WAAM,IAAD,EAChB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GACrCpC,GAAWqC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAmB,mCAAG,WAAOC,GAAP,iGAECpF,EAAAA,EAAAA,IAAYoF,GAFb,OAEhBzC,EAFgB,OAGtBgC,EAAUhC,GAHY,gDAMtB9C,QAAQC,IAAR,MANsB,yDAAH,sDAUnBuF,GAAkBC,EAAAA,EAAAA,UAASH,EAAqB,KAGtD,OAFAE,EAAgBN,GAET,kBAAMM,EAAgBE,QAAtB,CACV,GAAC,CAACR,IAOH,OACI,iCACA,SAAC,EAAD,CAAab,MAAOa,EAAOZ,YAPL,SAACY,GAEvBD,EAD6B,KAAVC,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,IAKEL,EAAOlC,QAAS,SAACgD,EAAA,EAAD,CAAW7C,SAAU+B,EAAQ9B,SAAUA,KAAc,gBAAK6C,MAAO,CAACC,OAAQ,SAASpC,IAAI,+EAA+EC,IAAI,kBAGlM,C","sources":["api/tmbApiService.js","components/MovieList/MovieList.styled.jsx","utils/genresTransform.jsx","components/MovieList/MovieList.jsx","components/SearchField/SearchField.styled.jsx","components/SearchField/SearchField.jsx","pages/Movies.jsx"],"sourcesContent":["\nconst KEY_API = '0b11624b950ea9c4284f61844023b09c';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrends = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}trending/all/day?api_key=${KEY_API}`);\n    const data = await response.json();\n    console.log(data.results);\n    return data.results;\n    \n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const fetchMovies = async (movieSearch) => {\n\n  try {\n    const response = await fetch(`${BASE_URL}search/movie?api_key=${KEY_API}&query=${movieSearch}&language=en-US&page=1&include_adult=false`)\n    const data = await response.json();\n    return data.results;\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n  export const fetchMovieById = async (movie) => {\n\n    try {\n      const response = await fetch(`${BASE_URL}movie/${movie}?api_key=${KEY_API}&language=en-US`)\n      const data = await response.json();\n      return data;\n  \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  export const fetchMovieReviews = async (movie) => {\n\n    try {\n      const response = await fetch(`${BASE_URL}movie/${movie}/reviews?api_key=${KEY_API}&language=en-US&page=1`)\n      const data = await response.json();\n      return data.results;\n  \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  export const fetchMovieCast = async (movie) => {\n\n    try {\n      const response = await fetch(`${BASE_URL}movie/${movie}/credits?api_key=${KEY_API}&language=en-US&page=1`)\n      const data = await response.json();\n      return data.cast;\n  \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  export const fetchGenres = async () => {\n\n    try {\n      const response = await fetch(`${BASE_URL}genre/movie/list?api_key=${KEY_API}&language=en-US`)\n      const data = await response.json();\n\n      const genresList = data.genres.reduce((acc, { id, name }) => {\n        acc[id] = name;\n        return acc;\n        }, {});\n\n        localStorage.setItem('genresList', JSON.stringify(genresList));\n  \n    } catch (error) {\n      console.log(error);\n    }\n  }\n","import styled from \"styled-components\";\n\nexport const MoviesWrapper = styled.ul`\n    margin-top: 40px;\n    margin-bottom 40px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    grid-auto-rows: minmax(300px, auto);\n    gap: 25px;\n`\nexport const MovieCard = styled.li`\n    position: relative;\n    border: 2px solid ${(prop)=> prop.theme.accent};\n    border-radius: 10px;\n    overflow: hidden;\n    transition: transform 250ms ease-in-out;\n\n    &:hover,\n    &:focus {\n        transform: scale(1.03);\n        box-shadow: -1px 8px 66px 6px rgba(115,149,174,0.76);\n    }\n`\nexport const DescrWrapper = styled.div`\n    padding: 10px;\n`\nexport const Title = styled.h2`\n    font-size: 22px;\n`\nexport const Img = styled.img`\n    object-fit: cover;\n    object-position: left top;\n    width: 100%;\n    height: 400px;\n`\nexport const VoteAverege = styled.p`\n    position: absolute; \n    top:20px;\n    left: 20px;\n    padding: 10px 7px;\n    border-radius: 5px;\n    font-weight: bold;\n    background-color: ${(prop)=> prop.theme.accent}\n`\nexport const InnerWrapper = styled.div`\n    display: flex;\n    margin-top: 8px;\n    gap: 3px;\n`\nexport const Genres = styled.p`\n\n`\nexport const ReleaseDate = styled.p`\n\n`\n","const genresConvertor = (genre_ids) => {\n    const parcedGenres = localStorage.getItem('genresList') ? JSON.parse(localStorage.getItem('genresList')) : {};\n    const result = genre_ids.map(id => parcedGenres[id]).filter(item => item !== undefined);\n\n    if (result.length > 2) {\n      result.splice(3, result.length - 2).push(\"Others\");\n\n    } else if (result.length === 0) {\n      result.push(\"no genres\")\n    }\n\n    return result\n  }\n\nexport default genresConvertor;","import { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getYear } from 'date-fns'\nimport { MoviesWrapper, MovieCard, DescrWrapper, InnerWrapper, Title, Img, VoteAverege, Genres, ReleaseDate} from './MovieList.styled';\nimport genresConvertor from '../../utils/genresTransform';\n\nconst MovieList = ({movieArr, location})=> {\n    const BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n    return(\n        <MoviesWrapper>\n            {movieArr.map(({id, original_title, original_name, vote_average, poster_path, genre_ids, release_date, first_air_date})=> {\n                return (\n                    <MovieCard key={id}>\n                        <NavLink to={`/movies/${id}`} state={{from: location}} >\n                            <Img src={`${BASE_URL_IMG}${poster_path}`} alt={original_title}/>\n                            <DescrWrapper>\n                                <Title>{original_title || original_name}</Title>\n                                <VoteAverege>{vote_average.toFixed(1)}</VoteAverege>\n                                <InnerWrapper>\n                                    <Genres>{genresConvertor(genre_ids).join(', ')}</Genres>\n                                    <ReleaseDate>| {getYear(new Date(release_date || first_air_date))}</ReleaseDate>\n                                </InnerWrapper>\n                            </DescrWrapper>\n                        </NavLink>\n                    </MovieCard>\n                )\n            })}\n        </MoviesWrapper>)\n}\n\nexport default MovieList;\n\nMovieList.propTypes = {\n    movieArr: PropTypes.array.isRequired,\n    location: PropTypes.object.isRequired,\n}","import styled from \"styled-components\";\nimport { BsSearch } from 'react-icons/bs';\n\n\nexport const Search = styled.form`\n    position: absolute;\n    top: 70px;\n    left: 50%;\n    transform: translateX(-50%);\n    display: flex;\n    justify-content: center;\n    background-color: ${(prop) => prop.theme.header}\n`\n\nexport const SearchIcon = styled(BsSearch)`\n    position: absolute;\n    right: 7px;\n    top: 6px;\n`\n\nexport const Input = styled.input`\n    height: 20px;\n    width: 250px;\n    padding: 10px;\n    padding-right: 15px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 16px;\n    margin-right: 1px;\n`","import { Search, Input, SearchIcon } from './SearchField.styled';\n\n\n\nexport const SearchField = ({value, queryString}) => {\n\n    return (\n        <Search >\n                <Input type='text' value={value ?? ''} onChange={(evt) => queryString(evt.target.value)}/>\n                <SearchIcon size={30}/>\n        </Search>\n    )\n}\nexport default SearchField;","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from \"react-router-dom\";\nimport { fetchMovies } from '../api/tmbApiService';\nimport { debounce } from \"lodash\";\nimport MovieList from '../components/MovieList/MovieList';\nimport SearchField from '../components/SearchField/SearchField';\n\nconst Movies = ()=> {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? '';\n    const location = useLocation();\n\n    useEffect(()=>{\n        const foundMoviesOnSearch = async (request) => {\n            try {\n              const movieArr = await fetchMovies(request);\n              setMovies(movieArr);\n\n            } catch (error) {\n              console.log(error);\n            }\n        }\n\n        const debouncedSearch = debounce(foundMoviesOnSearch, 400);\n        debouncedSearch(query);\n\n        return () => debouncedSearch.cancel();\n    },[query])\n\n    const updateQueryString = (query) => {\n        const nextParams = query !== \"\" ? { query } : {};\n        setSearchParams(nextParams);\n      };\n\n    return (\n        <>\n        <SearchField value={query} queryString={updateQueryString}/>\n        {movies.length ? <MovieList movieArr={movies} location={location}/> : <img style={{height: '550px'}}src='https://i.pinimg.com/originals/44/5f/1a/445f1ab89041d998d9fa937ad7f9efa3.gif' alt='waiting cat'/>}\n        </>\n    )\n}\n\nexport default Movies;\n\n//https://i.pinimg.com/originals/44/5f/1a/445f1ab89041d998d9fa937ad7f9efa3.gif"],"names":["KEY_API","BASE_URL","fetchTrends","fetch","response","json","data","console","log","results","fetchMovies","movieSearch","fetchMovieById","movie","fetchMovieReviews","fetchMovieCast","cast","fetchGenres","genresList","genres","reduce","acc","id","name","localStorage","setItem","JSON","stringify","MoviesWrapper","styled","MovieCard","prop","theme","accent","DescrWrapper","Title","Img","VoteAverege","InnerWrapper","Genres","ReleaseDate","genre_ids","parcedGenres","getItem","parse","result","map","filter","item","undefined","length","splice","push","movieArr","location","original_title","original_name","vote_average","poster_path","release_date","first_air_date","to","state","from","src","alt","toFixed","genresConvertor","join","getYear","Date","Search","header","SearchIcon","BsSearch","Input","value","queryString","type","onChange","evt","target","size","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useLocation","useEffect","foundMoviesOnSearch","request","debouncedSearch","debounce","cancel","MovieList","style","height"],"sourceRoot":""}